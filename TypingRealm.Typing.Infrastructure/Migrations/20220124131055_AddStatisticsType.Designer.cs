// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TypingRealm.Typing.Infrastructure.DataAccess;

#nullable disable

namespace TypingRealm.Typing.Infrastructure.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20220124131055_AddStatisticsType")]
    partial class AddStatisticsType
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TypingRealm.Data.Infrastructure.DataAccess.Entities.KeyPressEvent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<decimal>("AbsoluteDelay")
                        .HasColumnType("numeric")
                        .HasColumnName("absolute_delay");

                    b.Property<int>("Index")
                        .HasColumnType("integer")
                        .HasColumnName("index");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("key");

                    b.Property<int>("KeyAction")
                        .HasColumnType("integer")
                        .HasColumnName("key_action");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("order");

                    b.Property<string>("TextTypingResultId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("text_typing_result_id");

                    b.HasKey("Id")
                        .HasName("pk_key_press_event");

                    b.HasIndex("Order")
                        .HasDatabaseName("ix_key_press_event_order");

                    b.HasIndex("TextTypingResultId")
                        .HasDatabaseName("ix_key_press_event_text_typing_result_id");

                    b.ToTable("key_press_event", (string)null);
                });

            modelBuilder.Entity("TypingRealm.Data.Infrastructure.DataAccess.Entities.Text", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("CreatedByUser")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by_user");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_utc");

                    b.Property<int?>("GenerationLength")
                        .HasColumnType("integer")
                        .HasColumnName("generation_length");

                    b.Property<string>("GenerationShouldContain")
                        .HasColumnType("text")
                        .HasColumnName("generation_should_contain");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("boolean")
                        .HasColumnName("is_archived");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("boolean")
                        .HasColumnName("is_public");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("language");

                    b.Property<int?>("TextGenerationType")
                        .HasColumnType("integer")
                        .HasColumnName("text_generation_type");

                    b.Property<int>("TextType")
                        .HasColumnType("integer")
                        .HasColumnName("text_type");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_text");

                    b.HasIndex("CreatedByUser")
                        .HasDatabaseName("ix_text_created_by_user");

                    b.HasIndex("CreatedUtc")
                        .HasDatabaseName("ix_text_created_utc");

                    b.HasIndex("IsArchived")
                        .HasDatabaseName("ix_text_is_archived");

                    b.HasIndex("IsPublic")
                        .HasDatabaseName("ix_text_is_public");

                    b.HasIndex("Language")
                        .HasDatabaseName("ix_text_language");

                    b.ToTable("text", (string)null);
                });

            modelBuilder.Entity("TypingRealm.Data.Infrastructure.DataAccess.Entities.TextTypingResult", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<DateTime>("StartedTypingUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("started_typing_utc");

                    b.Property<DateTime>("SubmittedResultsUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("submitted_results_utc");

                    b.Property<int>("TypingSessionTextIndex")
                        .HasColumnType("integer")
                        .HasColumnName("typing_session_text_index");

                    b.Property<string>("UserSessionId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_session_id");

                    b.HasKey("Id")
                        .HasName("pk_text_typing_result");

                    b.HasIndex("StartedTypingUtc")
                        .HasDatabaseName("ix_text_typing_result_started_typing_utc");

                    b.HasIndex("SubmittedResultsUtc")
                        .HasDatabaseName("ix_text_typing_result_submitted_results_utc");

                    b.HasIndex("TypingSessionTextIndex")
                        .HasDatabaseName("ix_text_typing_result_typing_session_text_index");

                    b.HasIndex("UserSessionId")
                        .HasDatabaseName("ix_text_typing_result_user_session_id");

                    b.ToTable("text_typing_result", (string)null);
                });

            modelBuilder.Entity("TypingRealm.Data.Infrastructure.DataAccess.Entities.TypingSession", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("CreatedByUser")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by_user");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_utc");

                    b.HasKey("Id")
                        .HasName("pk_typing_session");

                    b.HasIndex("CreatedByUser")
                        .HasDatabaseName("ix_typing_session_created_by_user");

                    b.HasIndex("CreatedUtc")
                        .HasDatabaseName("ix_typing_session_created_utc");

                    b.ToTable("typing_session", (string)null);
                });

            modelBuilder.Entity("TypingRealm.Data.Infrastructure.DataAccess.Entities.TypingSessionText", b =>
                {
                    b.Property<long>("RowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("row_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("RowId"));

                    b.Property<int>("IndexInTypingSession")
                        .HasColumnType("integer")
                        .HasColumnName("index_in_typing_session");

                    b.Property<string>("TextId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("text_id");

                    b.Property<string>("TypingSessionId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("typing_session_id");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("RowId")
                        .HasName("pk_typing_session_text");

                    b.HasIndex("TextId")
                        .HasDatabaseName("ix_typing_session_text_text_id");

                    b.HasIndex("TypingSessionId")
                        .HasDatabaseName("ix_typing_session_text_typing_session_id");

                    b.HasIndex("IndexInTypingSession", "TypingSessionId")
                        .IsUnique()
                        .HasDatabaseName("ix_typing_session_text_index_in_typing_session_typing_session_");

                    b.ToTable("typing_session_text", (string)null);
                });

            modelBuilder.Entity("TypingRealm.Data.Infrastructure.DataAccess.Entities.UserSession", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_utc");

                    b.Property<string>("TypingSessionId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("typing_session_id");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<int>("UserTimeZoneOffsetMinutes")
                        .HasColumnType("integer")
                        .HasColumnName("user_time_zone_offset_minutes");

                    b.HasKey("Id")
                        .HasName("pk_user_session");

                    b.HasIndex("TypingSessionId")
                        .HasDatabaseName("ix_user_session_typing_session_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_session_user_id");

                    b.HasIndex("CreatedUtc", "UserTimeZoneOffsetMinutes")
                        .HasDatabaseName("ix_user_session_created_utc_user_time_zone_offset_minutes");

                    b.ToTable("user_session", (string)null);
                });

            modelBuilder.Entity("TypingRealm.Data.Infrastructure.DataAccess.Entities.KeyPressEvent", b =>
                {
                    b.HasOne("TypingRealm.Data.Infrastructure.DataAccess.Entities.TextTypingResult", "TextTypingResult")
                        .WithMany("Events")
                        .HasForeignKey("TextTypingResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_key_press_event_text_typing_result_text_typing_result_id");

                    b.Navigation("TextTypingResult");
                });

            modelBuilder.Entity("TypingRealm.Data.Infrastructure.DataAccess.Entities.TextTypingResult", b =>
                {
                    b.HasOne("TypingRealm.Data.Infrastructure.DataAccess.Entities.UserSession", "UserSession")
                        .WithMany("TextTypingResults")
                        .HasForeignKey("UserSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_text_typing_result_user_session_user_session_id");

                    b.Navigation("UserSession");
                });

            modelBuilder.Entity("TypingRealm.Data.Infrastructure.DataAccess.Entities.TypingSessionText", b =>
                {
                    b.HasOne("TypingRealm.Data.Infrastructure.DataAccess.Entities.Text", "Text")
                        .WithMany()
                        .HasForeignKey("TextId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_typing_session_text_text_text_id");

                    b.HasOne("TypingRealm.Data.Infrastructure.DataAccess.Entities.TypingSession", "TypingSession")
                        .WithMany("Texts")
                        .HasForeignKey("TypingSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_typing_session_text_typing_session_typing_session_id");

                    b.Navigation("Text");

                    b.Navigation("TypingSession");
                });

            modelBuilder.Entity("TypingRealm.Data.Infrastructure.DataAccess.Entities.UserSession", b =>
                {
                    b.HasOne("TypingRealm.Data.Infrastructure.DataAccess.Entities.TypingSession", "TypingSession")
                        .WithMany()
                        .HasForeignKey("TypingSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_session_typing_session_typing_session_id");

                    b.Navigation("TypingSession");
                });

            modelBuilder.Entity("TypingRealm.Data.Infrastructure.DataAccess.Entities.TextTypingResult", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("TypingRealm.Data.Infrastructure.DataAccess.Entities.TypingSession", b =>
                {
                    b.Navigation("Texts");
                });

            modelBuilder.Entity("TypingRealm.Data.Infrastructure.DataAccess.Entities.UserSession", b =>
                {
                    b.Navigation("TextTypingResults");
                });
#pragma warning restore 612, 618
        }
    }
}
