using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;
using Microsoft.EntityFrameworkCore;

namespace TypingRealm.Library.Infrastructure.DataAccess.Entities;

#pragma warning disable CS8618
[Index(nameof(BookId))]
[Index(nameof(IndexInBook))]
public class SentenceDao : IDao<SentenceDao>
{
    // Consider making this Id long autogenerated.
    [Key]
    [MaxLength(50)]
    public string Id { get; set; }

    [MaxLength(50)]
    public string BookId { get; set; }
    public virtual BookDao Book { get; set; }

    public int IndexInBook { get; set; }

    public string Value { get; set; }

    public virtual ICollection<WordDao> Words { get; set; }

    public static SentenceDao ToDao(Sentence sentence)
    {
        return new SentenceDao
        {
            Id = sentence.SentenceId,
            BookId = sentence.BookId,
            IndexInBook = sentence.IndexInBook,
            Value = sentence.Value,
            Words = sentence.Words.Select(word => WordDao.ToDao(word)).ToList()
        };
    }

    public Sentence FromDao()
    {
        return new Sentence(new(BookId), new(Id), IndexInBook, Value, Words.Select(dao => dao.FromDao()).ToList());
    }

    public void MergeFrom(SentenceDao from)
    {
        if (BookId != from.BookId)
            BookId = from.BookId;

        if (IndexInBook != from.IndexInBook)
            IndexInBook = from.IndexInBook;

        if (Value != from.Value)
            Value = from.Value;

        // Words and KeyPairs are append-only for now.
    }
}

[Index(nameof(SentenceId))]
[Index(nameof(IndexInSentence))]
[Index(nameof(Value))]
[Index(nameof(RawValue))]
[Index(nameof(CountInSentence))]
[Index(nameof(RawCountInSentence))]
public class WordDao
{
    [Key]
    [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
    public long Id { get; set; }

    [MaxLength(50)]
    public string SentenceId { get; set; }
    public virtual SentenceDao Sentence { get; set; }

    public int IndexInSentence { get; set; }

    [MaxLength(100)]
    public string Value { get; set; }

    [MaxLength(100)]
    public string RawValue { get; set; }

    public int CountInSentence { get; set; }
    public int RawCountInSentence { get; set; }

    public virtual ICollection<KeyPairDao> KeyPairs { get; set; }

    public static WordDao ToDao(Word word)
    {
        return new WordDao
        {
            Id = 0,
            SentenceId = word.SentenceId,
            IndexInSentence = word.IndexInSentence,
            Value = word.Value,
            RawValue = word.RawValue,
            CountInSentence = word.CountInSentence,
            RawCountInSentence = word.RawCountInSentence,
            KeyPairs = word.KeyPairs.Select(kp => KeyPairDao.ToDao(kp)).ToList()
        };
    }

    public Word FromDao()
    {
        return new Word(new(SentenceId), IndexInSentence, Value, RawValue, CountInSentence, RawCountInSentence, KeyPairs.Select(kp => kp.FromDao()));
    }
}

[Index(nameof(IndexInWord))]
[Index(nameof(CountInWord))]
[Index(nameof(CountInSentence))]
[Index(nameof(Value))]
public class KeyPairDao
{
    [Key]
    [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
    public long Id { get; set; }

    public int IndexInWord { get; set; }

    [MaxLength(10)]
    public string Value { get; set; }

    public int CountInWord { get; set; }

    public int CountInSentence { get; set; }

    public long WordId { get; set; }
    public virtual WordDao Word { get; set; }

    public static KeyPairDao ToDao(KeyPair keyPair)
    {
        return new KeyPairDao
        {
            Id = 0,
            IndexInWord = keyPair.IndexInWord,
            Value = keyPair.Value,
            CountInWord = keyPair.CountInWord,
            CountInSentence = keyPair.CountInSentence
        };
    }

    public KeyPair FromDao()
    {
        return new KeyPair(IndexInWord, Value, CountInWord, CountInSentence);
    }
}
#pragma warning restore CS8618
